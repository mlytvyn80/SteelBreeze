.TH "SBOceanTideLd" 3 "Mon May 14 2012" "Version 2.0.2" "SteelBreeze Reference Manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SBOceanTideLd \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SbGeoTide\&.H>\fP
.PP
Inherits \fBVector3\fP'\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSBOceanTideLd\fP (const \fBSBConfig\fP *)"
.br
.ti -1c
.RI "virtual \fB~SBOceanTideLd\fP ()"
.br
.ti -1c
.RI "virtual QString \fBClassName\fP () const "
.br
.ti -1c
.RI "virtual const \fBVector3\fP & \fBoperator()\fP (const \fBSBOLoad\fP *, const \fBSBTime\fP &)"
.br
.ti -1c
.RI "double & \fBoperator[]\fP (\fBDIRECTION\fP i)"
.br
.ti -1c
.RI "double \fBat\fP (\fBDIRECTION\fP i) const "
.br
.ti -1c
.RI "double \fBmodule\fP () const "
.br
.ti -1c
.RI "double \fBphi\fP () const "
.br
.ti -1c
.RI "double \fBlambda\fP () const "
.br
.ti -1c
.RI "\fBVector3\fP & \fBunify\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBunit\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP & \fBoperator+=\fP (const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP & \fBoperator-=\fP (const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP & \fBoperator*=\fP (double)"
.br
.ti -1c
.RI "\fBVector3\fP & \fBoperator/=\fP (double)"
.br
.ti -1c
.RI "virtual void \fBreport2Log\fP (\fBSBLog::LogLevel\fP, uint, const QString &, int, int, double=1\&.0) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVector3\fP &v) const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBVector3\fP &v) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBARG_IERS\fP (const \fBSBTime\fP &)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "const \fBSBConfig\fP * \fBCfg\fP"
.br
.ti -1c
.RI "double \fBANGLE\fP [11]"
.br
.ti -1c
.RI "double \fBvec\fP [3]"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static const double \fBSPEED\fP [11]"
.br
.ti -1c
.RI "static const double \fBANGFAC\fP [4][11]"
.br
.ti -1c
.RI "static const \fBSBMJD\fP \fB_1975\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBVector3\fP \fBoperator-\fP (const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator-\fP (const \fBVector3\fP &, const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator+\fP (const \fBVector3\fP &, const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator/\fP (const \fBVector3\fP &, double)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator*\fP (const \fBVector3\fP &, double)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator*\fP (double, const \fBVector3\fP &)"
.br
.ti -1c
.RI "double \fBoperator*\fP (const \fBVector3\fP &, const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator*\fP (const \fBMatrix3\fP &, const \fBVector3\fP &)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator%\fP (const \fBVector3\fP &, const \fBVector3\fP &)"
.br
.ti -1c
.RI "QDataStream & \fBoperator<<\fP (QDataStream &s, const \fBVector3\fP &v)"
.br
.ti -1c
.RI "QDataStream & \fBoperator>>\fP (QDataStream &s, \fBVector3\fP &v)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Ocean Tides Load displacements'\&. Inherits \fBVector3\fP representing VEN local tide displacement'\&.
.PP
\fBTodo\fP
.RS 4
Need some redesigning with respect to \fBSBStation::oLoad()\fP implementation'\&.
.RE
.PP

.PP
Definition at line 49 of file SbGeoTide\&.H'\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SBOceanTideLd::SBOceanTideLd (const \fBSBConfig\fP *Cfg_)"A constructor'\&.
.PP
A constructor'\&. Creates a copy of object'\&. 
.PP
Definition at line 126 of file SbGeoTide\&.C'\&.
.PP
References ANGLE, and Cfg\&.
.SS "virtual SBOceanTideLd::~SBOceanTideLd ()\fC [inline, virtual]\fP"A destructor'\&. 
.PP
Definition at line 62 of file SbGeoTide\&.H'\&.
.SH "Member Function Documentation"
.PP 
.SS "void SBOceanTideLd::ARG_IERS (const \fBSBTime\fP &Time)\fC [protected]\fP"COMPUTES THE ANGULAR ARGUMENT WHICH DEPENDS ON TIME FOR 11 TIDAL ARGUMENT CALCULATIONS'\&. This strange subroutine has been printed in the IERS Technical Note 21, IERS Conventions (1996)'\&. It is assumed that it calculates the '(omega_j*t + hi_j)' part of the equation (4), p'\&.53 (however, it is not stated explicitly)'\&. 
.PP
Definition at line 137 of file SbGeoTide\&.C'\&.
.PP
References _1975, ANGFAC, ANGLE, DEG2RAD, SPEED, SBMJD::time(), and SBTime::UT1()\&.
.PP
Referenced by operator()()\&.
.SS "double Vector3::at (\fBDIRECTION\fPi) const\fC [inline, inherited]\fP"
.PP
Definition at line 72 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.PP
Referenced by SBStationEditor::acquireData(), SBDelay::calc(), SBDelay::calcDerivatives(), collectListOfSINEXParameters(), collectListOfSINEXParameters4NEQ(), SBRunManager::constraintStationCoord(), SBRunManager::constraintStationVeloc(), SBTestEphem::createWidget4Test(), SBPlateMotion::displacement(), SBTestEphem::displayCoo(), SBTestAPLoad::fillData4Plotting(), SBEccListItem::key(), SBCoordsListItem::key(), SBRunManager::makeReportMaps(), Matrix3::Matrix3(), operator<<(), SB_TRF::prepareEccs4Session(), SBRefraction::refrDir(), SBStationEcc::registerEcc(), SBCoordsEditor::SBCoordsEditor(), sinex_SiteEccentricityBlock(), sinex_tro_StaCoordinatesBlock(), SBEccListItem::text(), SBCoordsListItem::text(), SBPlateEntry::velocity(), SBPlateMotion::velocity(), SBStationEditor::wCoordinates(), and SBSiteEditor::wSite()\&.
.SS "virtual QString SBOceanTideLd::ClassName () const\fC [inline, virtual]\fP"Refers to a class name (debug info) 
.PP
Reimplemented from \fBVector3\fP'\&.
.PP
Definition at line 64 of file SbGeoTide\&.H'\&.
.PP
Referenced by operator()()\&.
.SS "void Vector3::clear ()\fC [inline, inherited]\fP"
.PP
Definition at line 79 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.PP
Referenced by SBDelay::calc(), operator()(), SBPolarTideLd::operator()(), and SBSolidTideLd::operator()()\&.
.SS "double Vector3::lambda () const\fC [inline, inherited]\fP"
.PP
Definition at line 75 of file SbVector3\&.H'\&.
.PP
References Vector3::module(), and Vector3::vec\&.
.PP
Referenced by SBSolidTideLdIERS96::deg2OutPhase(), SBTestEphem::displayCoo(), SBSolidTideLdIERS96::latDepend(), SBSolidTideLdIERS96::makeStep2(), and SBSolidTideLd::operator()()\&.
.SS "double Vector3::module () const\fC [inline, inherited]\fP"
.PP
Definition at line 73 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.PP
Referenced by SBDelay::calc(), SBSolidTideLd::deg2InPhase(), SBSolidTideLdIERS96::deg2OutPhase(), SBSolidTideLdIERS96::deg3InPhase(), SBTestEphem::displayCoo(), SBSolidTideLd::dTide_dH2(), SBSolidTideLd::dTide_dL2(), SBSolidTideLd::dTide_dLag(), SBStationImport::importITRF(), Vector3::lambda(), SBSolidTideLdIERS96::latDepend(), SBRunManager::makeReportMaps(), SBSolidTideLd::makeStep1(), Vector3::phi(), Vector3::report2Log(), Vector3::unify(), and Vector3::unit()\&.
.SS "bool Vector3::operator!= (const \fBVector3\fP &v) const\fC [inline, inherited]\fP"
.PP
Definition at line 102 of file SbVector3\&.H'\&.
.SS "const \fBVector3\fP & SBOceanTideLd::operator() (const \fBSBOLoad\fP *OLoad, const \fBSBTime\fP &Time)\fC [virtual]\fP"Calculates site's displacements due to ocean loading corresponds to time T'\&. 
.PP
Definition at line 176 of file SbGeoTide\&.C'\&.
.PP
References SBOLoad::amplitude(), ANGLE, ARG_IERS(), ClassName(), Vector3::clear(), DEG2RAD, SBLog::ERR, SBTime::fArg_Omega(), Log, SBOLoad::phase(), sincos(), SBLog::TIDES, Vector3::vec, and SBLog::write()\&.
.SS "\fBVector3\fP & Vector3::operator*= (doublev)\fC [inline, inherited]\fP"
.PP
Definition at line 247 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.SS "\fBVector3\fP & Vector3::operator+= (const \fBVector3\fP &V)\fC [inline, inherited]\fP"
.PP
Definition at line 235 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.SS "\fBVector3\fP & Vector3::operator-= (const \fBVector3\fP &V)\fC [inline, inherited]\fP"
.PP
Definition at line 241 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.SS "\fBVector3\fP & Vector3::operator/= (doublev)\fC [inline, inherited]\fP"
.PP
Definition at line 253 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.SS "bool Vector3::operator== (const \fBVector3\fP &v) const\fC [inline, inherited]\fP"
.PP
Definition at line 100 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.SS "double& Vector3::operator[] (\fBDIRECTION\fPi)\fC [inline, inherited]\fP"
.PP
Definition at line 71 of file SbVector3\&.H'\&.
.PP
References Vector3::vec\&.
.SS "double Vector3::phi () const\fC [inline, inherited]\fP"
.PP
Definition at line 74 of file SbVector3\&.H'\&.
.PP
References Vector3::module(), and Vector3::vec\&.
.PP
Referenced by SBSolidTideLd::deg2InPhase(), SBSolidTideLdIERS96::deg2OutPhase(), SBTestEphem::displayCoo(), SBSolidTideLd::dTide_dLag(), SBSolidTideLdIERS96::latDepend(), SBSolidTideLdIERS96::makeStep2(), SBSolidTideLd::operator()(), SBSolidTideLd::permTide(), and SBSolidTideLdIERS96::permTide()\&.
.SS "void Vector3::report2Log (\fBSBLog::LogLevel\fPLev, uintFac, const QString &Pref, intw_, intd_, doubleScale = \fC1\&.0\fP) const\fC [virtual, inherited]\fP"
.PP
Definition at line 39 of file SbVector3\&.C'\&.
.PP
References Log, Vector3::module(), Vector3::vec, and SBLog::write()\&.
.PP
Referenced by SBStation::axisOffsetLenght(), SBDelay::calc(), SBEphem::calc(), SBAploEphem::displacement(), SBSolidTideLd::operator()(), SBTideLd::operator()(), and SBRefraction::operator()()\&.
.SS "\fBVector3\fP& Vector3::unify ()\fC [inline, inherited]\fP"
.PP
Definition at line 77 of file SbVector3\&.H'\&.
.PP
References Vector3::module()\&.
.PP
Referenced by SBDelay::calc(), SBSolidTideLd::deg2InPhase(), SBSolidTideLdIERS96::deg3InPhase(), and SBSolidTideLdIERS96::latDepend()\&.
.SS "\fBVector3\fP Vector3::unit () const\fC [inline, inherited]\fP"
.PP
Definition at line 78 of file SbVector3\&.H'\&.
.PP
References Vector3::module(), and Vector3::Vector3()\&.
.PP
Referenced by SBDelay::calc(), SBRunManager::constraintStationVeloc(), SBSolidTideLd::dTide_dH2(), and SBSolidTideLd::dTide_dL2()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "\fBVector3\fP operator% (const \fBVector3\fP &V1, const \fBVector3\fP &V2)\fC [friend, inherited]\fP"makes a vector product of two vectors (because '%' has a priority of '*')
.PP
makes vector product of two vectors'\&. 
.PP
Definition at line 326 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator* (const \fBVector3\fP &V1, doublev2)\fC [friend, inherited]\fP"multiplies vector by scalar'\&. 
.PP
Definition at line 302 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator* (doublev1, const \fBVector3\fP &V2)\fC [friend, inherited]\fP"multiplies vector by scalar'\&. 
.PP
Definition at line 310 of file SbVector3\&.H'\&.
.SS "double operator* (const \fBVector3\fP &V1, const \fBVector3\fP &V2)\fC [friend, inherited]\fP"makes a scalar product of two vectors
.PP
makes scalar product of two vectors'\&. 
.PP
Definition at line 318 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator* (const \fBMatrix3\fP &M, const \fBVector3\fP &V)\fC [friend, inherited]\fP"makes a product of matrix and vector
.PP
\fBMatrix3\fP makes product of matrix and vector'\&. 
.PP
Definition at line 519 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator+ (const \fBVector3\fP &V1, const \fBVector3\fP &V2)\fC [friend, inherited]\fP"
.PP
Definition at line 278 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator- (const \fBVector3\fP &V)\fC [friend, inherited]\fP"
.PP
Definition at line 270 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator- (const \fBVector3\fP &V1, const \fBVector3\fP &V2)\fC [friend, inherited]\fP"
.PP
Definition at line 286 of file SbVector3\&.H'\&.
.SS "\fBVector3\fP operator/ (const \fBVector3\fP &V1, doublev2)\fC [friend, inherited]\fP"
.PP
Definition at line 294 of file SbVector3\&.H'\&.
.SS "QDataStream& operator<< (QDataStream &s, const \fBVector3\fP &v)\fC [friend, inherited]\fP"
.PP
Definition at line 103 of file SbVector3\&.H'\&.
.SS "QDataStream& operator>> (QDataStream &s, \fBVector3\fP &v)\fC [friend, inherited]\fP"
.PP
Definition at line 105 of file SbVector3\&.H'\&.
.SH "Member Data Documentation"
.PP 
.SS "const \fBSBMJD\fP \fBSBOceanTideLd::_1975\fP\fC [static, protected]\fP"
.PP
Definition at line 55 of file SbGeoTide\&.H'\&.
.PP
Referenced by ARG_IERS()\&.
.SS "const double \fBSBOceanTideLd::ANGFAC\fP\fC [static, protected]\fP"\fBInitial value:\fP
.PP
.nf

{
  {  2\&.0, 0\&.0, 2\&.0, 2\&.0, 1\&.0 , 1\&.0 ,-1\&.0 , 1\&.0 , 0\&.0, 0\&.0, 2\&.0},
  { -2\&.0, 0\&.0,-3\&.0, 0\&.0, 0\&.0 ,-2\&.0 , 0\&.0 ,-3\&.0 , 2\&.0, 1\&.0, 0\&.0},
  {  0\&.0, 0\&.0, 1\&.0, 0\&.0, 0\&.0 , 0\&.0 , 0\&.0 , 1\&.0 , 0\&.0,-1\&.0, 0\&.0},
  {  0\&.0, 0\&.0, 0\&.0, 0\&.0, 0\&.25,-0\&.25,-0\&.25,-0\&.25, 0\&.0, 0\&.0, 0\&.0}
}
.fi
.PP
Definition at line 54 of file SbGeoTide\&.H'\&.
.PP
Referenced by ARG_IERS()\&.
.SS "double \fBSBOceanTideLd::ANGLE\fP[11]\fC [protected]\fP"
.PP
Definition at line 56 of file SbGeoTide\&.H'\&.
.PP
Referenced by ARG_IERS(), operator()(), and SBOceanTideLd()\&.
.SS "const \fBSBConfig\fP* \fBSBOceanTideLd::Cfg\fP\fC [protected]\fP"
.PP
Definition at line 52 of file SbGeoTide\&.H'\&.
.PP
Referenced by SBOceanTideLd()\&.
.SS "const double \fBSBOceanTideLd::SPEED\fP\fC [static, protected]\fP"\fBInitial value:\fP
.PP
.nf

{
  1\&.40519e-04, 1\&.45444e-04, 1\&.37880e-04, 1\&.45842e-04, 0\&.72921e-04,
  0\&.67598e-04, 0\&.72523e-04, 0\&.64959e-04, 0\&.53234e-05, 0\&.26392e-05, 0\&.03982e-05
}
.fi
.PP
Definition at line 53 of file SbGeoTide\&.H'\&.
.PP
Referenced by ARG_IERS()\&.
.SS "double \fBVector3::vec\fP[3]\fC [protected, inherited]\fP"
.PP
Definition at line 53 of file SbVector3\&.H'\&.
.PP
Referenced by Vector3::at(), Vector3::clear(), Vector3::lambda(), Vector3::module(), operator()(), SBPolarTideLd::operator()(), Vector3::operator*=(), Vector3::operator+=(), Vector3::operator-=(), Vector3::operator/=(), Vector3::operator=(), Vector3::operator==(), Vector3::operator[](), Vector3::phi(), Vector3::report2Log(), and Vector3::Vector3()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SteelBreeze Reference Manual from the source code'\&.
